import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Iniciando seed para ADMIN_PREFEITURA...');
  console.log('üèõÔ∏è Demonstrando todos os m√≥dulos acess√≠veis ao ADMIN_PREFEITURA');

  // Hash das senhas
  const hashedPassword = await bcrypt.hash('123456', 12);

  // ===============================
  // 1. PREFEITURA (Sua Administra√ß√£o)
  // ===============================
  console.log('üèõÔ∏è 1. Criando Prefeitura Municipal...');
  const prefeitura = await prisma.prefeitura.upsert({
    where: { cnpj: '15555666000190' },
    update: {},
    create: {
      nome: 'Prefeitura Municipal de Campinas',
      cnpj: '15555666000190',
      email_administrativo: 'admin@campinas.sp.gov.br',
      ativo: true,
      data_cadastro: new Date(),
      requer_cupom_fiscal: true,
    },
  });
  console.log('‚úÖ Prefeitura criada:', prefeitura.nome);

  // ===============================
  // 2. ADMIN PREFEITURA (Usu√°rio Principal)
  // ===============================
  console.log('üëë 2. Criando Admin da Prefeitura...');
  const adminPrefeitura = await prisma.usuario.upsert({
    where: { email: 'admin@campinas.sp.gov.br' },
    update: {},
    create: {
      email: 'admin@campinas.sp.gov.br',
      senha: hashedPassword,
      nome: 'Carlos Eduardo Silva',
      cpf: '12345678901',
      tipo_usuario: 'ADMIN_PREFEITURA',
      prefeituraId: prefeitura.id,
      statusAcess: 'Ativado',
      ativo: true,
      data_cadastro: new Date(),
      phone: '19987654321',
    },
  });
  console.log('‚úÖ Admin Prefeitura criado:', adminPrefeitura.email);

  // ===============================
  // 3. √ìRG√ÉOS (Estrutura Administrativa)
  // ===============================
  console.log('üè¢ 3. Criando √ìrg√£os da Prefeitura...');
  
  const secretariaSaude = await prisma.orgao.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Secretaria Municipal de Sa√∫de',
      sigla: 'SMS',
      ativo: true,
    },
  });

  const secretariaEducacao = await prisma.orgao.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Secretaria Municipal de Educa√ß√£o',
      sigla: 'SME',
      ativo: true,
    },
  });

  const secretariaObras = await prisma.orgao.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Secretaria Municipal de Obras',
      sigla: 'SMO',
      ativo: true,
    },
  });

  const secretariaAssistencia = await prisma.orgao.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Secretaria de Assist√™ncia Social',
      sigla: 'SAS',
      ativo: true,
    },
  });

  const gabinetePrefeito = await prisma.orgao.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Gabinete do Prefeito',
      sigla: 'GAB',
      ativo: true,
    },
  });

  console.log('‚úÖ √ìrg√£os criados: SMS, SME, SMO, SAS, GAB');

  // ===============================
  // 4. USU√ÅRIOS DA PREFEITURA (Equipe)
  // ===============================
  console.log('üë• 4. Criando Usu√°rios da Prefeitura...');

  // Colaborador da Sa√∫de
  const colaboradorSaude = await prisma.usuario.upsert({
    where: { email: 'colaborador.saude@campinas.sp.gov.br' },
    update: {},
    create: {
      email: 'colaborador.saude@campinas.sp.gov.br',
      senha: hashedPassword,
      nome: 'Ana Paula Santos',
      cpf: '23456789012',
      tipo_usuario: 'COLABORADOR_PREFEITURA',
      prefeituraId: prefeitura.id,
      statusAcess: 'Ativado',
      ativo: true,
      data_cadastro: new Date(),
      phone: '19988887777',
    },
  });

  // Colaborador da Educa√ß√£o
  const colaboradorEducacao = await prisma.usuario.upsert({
    where: { email: 'colaborador.educacao@campinas.sp.gov.br' },
    update: {},
    create: {
      email: 'colaborador.educacao@campinas.sp.gov.br',
      senha: hashedPassword,
      nome: 'Jos√© Roberto Lima',
      cpf: '34567890123',
      tipo_usuario: 'COLABORADOR_PREFEITURA',
      prefeituraId: prefeitura.id,
      statusAcess: 'Ativado',
      ativo: true,
      data_cadastro: new Date(),
      phone: '19977776666',
    },
  });

  // Colaborador de Obras
  const colaboradorObras = await prisma.usuario.upsert({
    where: { email: 'colaborador.obras@campinas.sp.gov.br' },
    update: {},
    create: {
      email: 'colaborador.obras@campinas.sp.gov.br',
      senha: hashedPassword,
      nome: 'Miguel Fernandes',
      cpf: '45678901234',
      tipo_usuario: 'COLABORADOR_PREFEITURA',
      prefeituraId: prefeitura.id,
      statusAcess: 'Ativado',
      ativo: true,
      data_cadastro: new Date(),
      phone: '19966665555',
    },
  });

  // Colaborador de Assist√™ncia Social
  const colaboradorAssistencia = await prisma.usuario.upsert({
    where: { email: 'colaborador.assistencia@campinas.sp.gov.br' },
    update: {},
    create: {
      email: 'colaborador.assistencia@campinas.sp.gov.br',
      senha: hashedPassword,
      nome: 'Maria Aparecida Costa',
      cpf: '56789012345',
      tipo_usuario: 'COLABORADOR_PREFEITURA',
      prefeituraId: prefeitura.id,
      statusAcess: 'Ativado',
      ativo: true,
      data_cadastro: new Date(),
      phone: '19955554444',
    },
  });

  console.log('‚úÖ Colaboradores criados: Sa√∫de, Educa√ß√£o, Obras, Assist√™ncia');

  // ===============================
  // 5. CATEGORIAS (Classifica√ß√µes Internas)
  // ===============================
  console.log('üìÇ 5. Criando Categorias da Prefeitura...');
  
  const categoriaAmbulancia = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'VEICULO',
      nome: 'Ambul√¢ncias',
      descricao: 'Ve√≠culos de emerg√™ncia m√©dica e transporte de pacientes',
      ativo: true,
    },
  });

  const categoriaEscolar = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'VEICULO',
      nome: 'Transporte Escolar',
      descricao: 'Ve√≠culos para transporte de estudantes',
      ativo: true,
    },
  });

  const categoriaObras = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'VEICULO',
      nome: 'Ve√≠culos de Obras',
      descricao: 'Caminh√µes, tratores e m√°quinas pesadas',
      ativo: true,
    },
  });

  const categoriaAdministrativo = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'VEICULO',
      nome: 'Administrativos',
      descricao: 'Carros para uso administrativo',
      ativo: true,
    },
  });

  const categoriaMotoristaEmergencia = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'MOTORISTA',
      nome: 'Motoristas de Emerg√™ncia',
      descricao: 'Condutores habilitados para ve√≠culos de emerg√™ncia',
      ativo: true,
    },
  });

  const categoriaMotoristaEscolar = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'MOTORISTA',
      nome: 'Motoristas Escolares',
      descricao: 'Condutores especializados em transporte escolar',
      ativo: true,
    },
  });

  console.log('‚úÖ Categorias criadas: Ambul√¢ncias, Escolar, Obras, Administrativos, Motoristas');

  // ===============================
  // 6. MOTORISTAS (Condutores da Prefeitura)
  // ===============================
  console.log('üöó 6. Criando Motoristas da Prefeitura...');
  
  const motoristaJoao = await prisma.motorista.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Jo√£o Carlos da Silva',
      cpf: '11122233344',
      cnh: '12345678901',
      categoria_cnh: 'D',
      data_vencimento_cnh: new Date('2025-12-31'),
      telefone: '19988881111',
      email: 'joao.silva@campinas.sp.gov.br',
      endereco: 'Rua das Amoreiras, 123 - Campinas/SP',
      ativo: true,
      observacoes: 'Motorista experiente com 20 anos, especializado em ambul√¢ncias',
    },
  });

  const motoristaMaria = await prisma.motorista.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Maria Jos√© Santos',
      cpf: '22233344455',
      cnh: '23456789012',
      categoria_cnh: 'D',
      data_vencimento_cnh: new Date('2025-06-30'),
      telefone: '19977772222',
      email: 'maria.santos@campinas.sp.gov.br',
      endereco: 'Av. Brasil, 456 - Campinas/SP',
      ativo: true,
      observacoes: 'Motorista especializada em transporte escolar, curso de primeiros socorros',
    },
  });

  const motoristaPedro = await prisma.motorista.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Pedro Henrique Costa',
      cpf: '33344455566',
      cnh: '34567890123',
      categoria_cnh: 'E',
      data_vencimento_cnh: new Date('2025-09-15'),
      telefone: '19966663333',
      email: 'pedro.costa@campinas.sp.gov.br',
      endereco: 'Rua das Flores, 789 - Campinas/SP',
      ativo: true,
      observacoes: 'Motorista de m√°quinas pesadas, 15 anos de experi√™ncia em obras p√∫blicas',
    },
  });

  const motoristaCarlos = await prisma.motorista.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Carlos Alberto Ferreira',
      cpf: '44455566677',
      cnh: '45678901234',
      categoria_cnh: 'B',
      data_vencimento_cnh: new Date('2025-03-20'),
      telefone: '19955554444',
      email: 'carlos.ferreira@campinas.sp.gov.br',
      endereco: 'Rua da Paz, 321 - Campinas/SP',
      ativo: true,
      observacoes: 'Motorista administrativo, respons√°vel pelo gabinete',
    },
  });

  console.log('‚úÖ Motoristas criados: Jo√£o (Emerg√™ncia), Maria (Escolar), Pedro (Obras), Carlos (Admin)');

  // ===============================
  // 7. VE√çCULOS (Frota Municipal)
  // ===============================
  console.log('üöë 7. Criando Frota de Ve√≠culos...');

  // Obter combust√≠veis existentes (criados pelo super admin ou seed anterior)
  let gasolinaComum = await prisma.combustivel.findUnique({ where: { sigla: 'GAS_COMUM' } });
  let etanol = await prisma.combustivel.findUnique({ where: { sigla: 'ETANOL' } });
  let dieselS10 = await prisma.combustivel.findUnique({ where: { sigla: 'DIESEL_S10' } });

  // Se n√£o existirem, criar combust√≠veis b√°sicos
  if (!gasolinaComum) {
    gasolinaComum = await prisma.combustivel.create({
      data: {
        nome: 'Gasolina Comum',
        sigla: 'GAS_COMUM',
        descricao: 'Gasolina comum para ve√≠culos leves',
        ativo: true,
      },
    });
  }

  if (!etanol) {
    etanol = await prisma.combustivel.create({
      data: {
        nome: 'Etanol',
        sigla: 'ETANOL',
        descricao: 'Etanol hidratado para ve√≠culos flex',
        ativo: true,
      },
    });
  }

  if (!dieselS10) {
    dieselS10 = await prisma.combustivel.create({
      data: {
        nome: 'Diesel S10',
        sigla: 'DIESEL_S10',
        descricao: 'Diesel com baixo teor de enxofre',
        ativo: true,
      },
    });
  }

  // Ambul√¢ncia UTI
  const ambulanciaUTI = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaSaude.id,
      nome: 'Ambul√¢ncia UTI 01',
      placa: 'CAM1234',
      modelo: 'Mercedes Sprinter 415',
      ano: 2021,
      capacidade_tanque: 100.0,
      tipo_abastecimento: 'COTA',
      ativo: true,
      tipo_veiculo: 'Ambulancia',
      situacao_veiculo: 'Proprio',
      apelido: 'UTI M√≥vel',
      ano_fabricacao: 2020,
      chassi: '9BM979045N123456',
      renavam: '11111111111',
      cor: 'Branco',
      capacidade_passageiros: 3,
      observacoes: 'Ambul√¢ncia UTI equipada com desfibrilador, respirador e equipamentos de suporte avan√ßado',
      periodicidade: 'Semanal',
      quantidade: 200.0,
    },
  });

  // Ambul√¢ncia B√°sica
  const ambulanciaBasica = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaSaude.id,
      nome: 'Ambul√¢ncia B√°sica 01',
      placa: 'CAM5678',
      modelo: 'Fiat Ducato',
      ano: 2020,
      capacidade_tanque: 90.0,
      tipo_abastecimento: 'COTA',
      ativo: true,
      tipo_veiculo: 'Ambulancia',
      situacao_veiculo: 'Proprio',
      apelido: 'B√°sica 01',
      ano_fabricacao: 2019,
      chassi: '9BD21806AL123456',
      renavam: '22222222222',
      cor: 'Branco',
      capacidade_passageiros: 4,
      observacoes: 'Ambul√¢ncia b√°sica para transporte de pacientes est√°veis',
      periodicidade: 'Semanal',
      quantidade: 150.0,
    },
  });

  // Micro-√¥nibus Escolar
  const microonibusEscolar = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaEducacao.id,
      nome: 'Micro-√¥nibus Escolar 01',
      placa: 'CAM9012',
      modelo: 'Iveco Daily',
      ano: 2022,
      capacidade_tanque: 120.0,
      tipo_abastecimento: 'COTA',
      ativo: true,
      tipo_veiculo: 'Microonibus',
      situacao_veiculo: 'Proprio',
      apelido: 'Escolar 01',
      ano_fabricacao: 2021,
      chassi: '9BM33C20C123456',
      renavam: '33333333333',
      cor: 'Amarelo',
      capacidade_passageiros: 25,
      observacoes: 'Micro-√¥nibus equipado com cintos de seguran√ßa e sistema de rastreamento',
      periodicidade: 'Semanal',
      quantidade: 300.0,
    },
  });

  // Caminh√£o de Obras
  const caminhaoObras = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaObras.id,
      nome: 'Caminh√£o Basculante 01',
      placa: 'CAM3456',
      modelo: 'Volkswagen Constellation',
      ano: 2019,
      capacidade_tanque: 200.0,
      tipo_abastecimento: 'COTA',
      ativo: true,
      tipo_veiculo: 'Caminhao',
      situacao_veiculo: 'Proprio',
      apelido: 'Basculante 01',
      ano_fabricacao: 2018,
      chassi: '9BW2ZEE123456',
      renavam: '44444444444',
      cor: 'Azul',
      capacidade_passageiros: 3,
      observacoes: 'Caminh√£o basculante para obras e limpeza urbana',
      periodicidade: 'Semanal',
      quantidade: 400.0,
    },
  });

  // Van Assist√™ncia Social
  const vanAssistencia = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaAssistencia.id,
      nome: 'Van Assist√™ncia Social 01',
      placa: 'CAM7890',
      modelo: 'Renault Master',
      ano: 2021,
      capacidade_tanque: 80.0,
      tipo_abastecimento: 'LIVRE',
      ativo: true,
      tipo_veiculo: 'Microonibus',
      situacao_veiculo: 'Proprio',
      apelido: 'Van Social',
      ano_fabricacao: 2020,
      chassi: '93Y4URC85123456',
      renavam: '55555555555',
      cor: 'Branco',
      capacidade_passageiros: 14,
      observacoes: 'Van para atendimento domiciliar e transporte de idosos',
    },
  });

  // Carro Administrativo
  const carroAdmin = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: gabinetePrefeito.id,
      nome: 'Carro Administrativo 01',
      placa: 'CAM2468',
      modelo: 'Honda Civic',
      ano: 2023,
      capacidade_tanque: 50.0,
      tipo_abastecimento: 'COM_AUTORIZACAO',
      ativo: true,
      tipo_veiculo: 'Carro',
      situacao_veiculo: 'Proprio',
      apelido: 'Civic do Gabinete',
      ano_fabricacao: 2022,
      chassi: '9BWHE51030123456',
      renavam: '66666666666',
      cor: 'Preto',
      capacidade_passageiros: 5,
      observacoes: 'Ve√≠culo executivo para uso do gabinete',
    },
  });

  console.log('‚úÖ Ve√≠culos criados: 2 Ambul√¢ncias, 1 Micro-√¥nibus, 1 Caminh√£o, 1 Van, 1 Carro');

  // Associar combust√≠veis aos ve√≠culos
  await prisma.veiculoCombustivel.createMany({
    data: [
      // Ambul√¢ncias - Diesel
      { veiculoId: ambulanciaUTI.id, combustivelId: dieselS10.id, ativo: true },
      { veiculoId: ambulanciaBasica.id, combustivelId: dieselS10.id, ativo: true },
      // Micro-√¥nibus - Diesel
      { veiculoId: microonibusEscolar.id, combustivelId: dieselS10.id, ativo: true },
      // Caminh√£o - Diesel
      { veiculoId: caminhaoObras.id, combustivelId: dieselS10.id, ativo: true },
      // Van - Gasolina/Etanol
      { veiculoId: vanAssistencia.id, combustivelId: gasolinaComum.id, ativo: true },
      { veiculoId: vanAssistencia.id, combustivelId: etanol.id, ativo: true },
      // Carro - Gasolina/Etanol
      { veiculoId: carroAdmin.id, combustivelId: gasolinaComum.id, ativo: true },
      { veiculoId: carroAdmin.id, combustivelId: etanol.id, ativo: true },
    ],
  });

  // Associar categorias aos ve√≠culos
  await prisma.veiculoCategoria.createMany({
    data: [
      { veiculoId: ambulanciaUTI.id, categoriaId: categoriaAmbulancia.id, ativo: true },
      { veiculoId: ambulanciaBasica.id, categoriaId: categoriaAmbulancia.id, ativo: true },
      { veiculoId: microonibusEscolar.id, categoriaId: categoriaEscolar.id, ativo: true },
      { veiculoId: caminhaoObras.id, categoriaId: categoriaObras.id, ativo: true },
      { veiculoId: vanAssistencia.id, categoriaId: categoriaAdministrativo.id, ativo: true },
      { veiculoId: carroAdmin.id, categoriaId: categoriaAdministrativo.id, ativo: true },
    ],
  });

  // Associar motoristas aos ve√≠culos
  await prisma.veiculoMotorista.createMany({
    data: [
      // Jo√£o - Ambul√¢ncias
      { veiculoId: ambulanciaUTI.id, motoristaId: motoristaJoao.id, data_inicio: new Date(), ativo: true },
      { veiculoId: ambulanciaBasica.id, motoristaId: motoristaJoao.id, data_inicio: new Date(), ativo: true },
      // Maria - Escolar
      { veiculoId: microonibusEscolar.id, motoristaId: motoristaMaria.id, data_inicio: new Date(), ativo: true },
      // Pedro - Obras
      { veiculoId: caminhaoObras.id, motoristaId: motoristaPedro.id, data_inicio: new Date(), ativo: true },
      // Carlos - Administrativos
      { veiculoId: vanAssistencia.id, motoristaId: motoristaCarlos.id, data_inicio: new Date(), ativo: true },
      { veiculoId: carroAdmin.id, motoristaId: motoristaCarlos.id, data_inicio: new Date(), ativo: true },
    ],
  });

  console.log('‚úÖ Associa√ß√µes criadas: Ve√≠culos ‚Üî Combust√≠veis, Categorias, Motoristas');

  // ===============================
  // 8. VINCULA√á√ïES USU√ÅRIO-√ìRG√ÉO
  // ===============================
  console.log('üîó 8. Criando Vincula√ß√µes Usu√°rio-√ìrg√£o...');
  
  await prisma.usuarioOrgao.createMany({
    data: [
      // Ana Paula - Sa√∫de
      { usuarioId: colaboradorSaude.id, orgaoId: secretariaSaude.id, ativo: true },
      // Jos√© Roberto - Educa√ß√£o
      { usuarioId: colaboradorEducacao.id, orgaoId: secretariaEducacao.id, ativo: true },
      // Miguel - Obras
      { usuarioId: colaboradorObras.id, orgaoId: secretariaObras.id, ativo: true },
      // Maria Aparecida - Assist√™ncia
      { usuarioId: colaboradorAssistencia.id, orgaoId: secretariaAssistencia.id, ativo: true },
      // Admin pode acessar todos os √≥rg√£os
      { usuarioId: adminPrefeitura.id, orgaoId: secretariaSaude.id, ativo: true },
      { usuarioId: adminPrefeitura.id, orgaoId: secretariaEducacao.id, ativo: true },
      { usuarioId: adminPrefeitura.id, orgaoId: secretariaObras.id, ativo: true },
      { usuarioId: adminPrefeitura.id, orgaoId: secretariaAssistencia.id, ativo: true },
      { usuarioId: adminPrefeitura.id, orgaoId: gabinetePrefeito.id, ativo: true },
    ],
  });

  console.log('‚úÖ Vincula√ß√µes criadas: Colaboradores ‚Üî √ìrg√£os espec√≠ficos, Admin ‚Üî Todos √≥rg√£os');

  // ===============================
  // 9. CONTAS DE FATURAMENTO
  // ===============================
  console.log('üí∞ 9. Criando Contas de Faturamento por √ìrg√£o...');
  
  const contaFatSaude = await prisma.contaFaturamentoOrgao.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaSaude.id,
      nome: 'Conta Faturamento Sa√∫de',
      descricao: 'Conta para controle de gastos com combust√≠vel da Secretaria de Sa√∫de',
    },
  });

  const contaFatEducacao = await prisma.contaFaturamentoOrgao.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaEducacao.id,
      nome: 'Conta Faturamento Educa√ß√£o',
      descricao: 'Conta para controle de gastos com combust√≠vel da Secretaria de Educa√ß√£o',
    },
  });

  const contaFatObras = await prisma.contaFaturamentoOrgao.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaObras.id,
      nome: 'Conta Faturamento Obras',
      descricao: 'Conta para controle de gastos com combust√≠vel da Secretaria de Obras',
    },
  });

  const contaFatAssistencia = await prisma.contaFaturamentoOrgao.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaAssistencia.id,
      nome: 'Conta Faturamento Assist√™ncia',
      descricao: 'Conta para controle de gastos com combust√≠vel da Secretaria de Assist√™ncia Social',
    },
  });

  const contaFatGabinete = await prisma.contaFaturamentoOrgao.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: gabinetePrefeito.id,
      nome: 'Conta Faturamento Gabinete',
      descricao: 'Conta para controle de gastos com combust√≠vel do Gabinete do Prefeito',
    },
  });

  console.log('‚úÖ Contas de Faturamento criadas: Sa√∫de, Educa√ß√£o, Obras, Assist√™ncia, Gabinete');

  // ===============================
  // 10. PROCESSO LICITAT√ìRIO
  // ===============================
  console.log('üìã 10. Criando Processo Licitat√≥rio da Prefeitura...');
  
  const processoMunicipal = await prisma.processo.create({
    data: {
      tipo_contrato: 'OBJETIVO',
      prefeituraId: prefeitura.id,
      litros_desejados: 50000.0,
      valor_utilizado: 25000.0,
      valor_disponivel: 400000.0,
      numero_processo: 'PROC-CAMP-2024-001',
      numero_documento: 'LICIT-CAMP-2024-001',
      tipo_documento: 'LICITACAO',
      tipo_itens: 'QUANTIDADE_LITROS',
      objeto: 'Contrata√ß√£o de empresa para fornecimento de combust√≠veis automotivos (gasolina comum, etanol hidratado e diesel S10) para abastecimento da frota municipal de ve√≠culos da Prefeitura Municipal de Campinas, incluindo ambul√¢ncias, ve√≠culos escolares, m√°quinas de obras p√∫blicas e ve√≠culos administrativos',
      data_abertura: new Date('2024-01-15'),
      data_encerramento: new Date('2024-12-31'),
      status: 'ATIVO',
      ativo: true,
      observacoes: 'Processo licitat√≥rio modalidade preg√£o eletr√¥nico n¬∫ 001/2024 da Prefeitura Municipal de Campinas. Estimativa anual de consumo: 50.000 litros. Valor m√°ximo estimado: R$ 400.000,00. Prazo de entrega: imediato ap√≥s ordem de fornecimento. Vig√™ncia: 12 meses com possibilidade de prorroga√ß√£o.',
      arquivo_contrato: '/uploads/contratos/licitacao-campinas-001-2024.pdf',
    },
  });

  console.log('‚úÖ Processo Municipal criado:', processoMunicipal.numero_processo);

  // Associar combust√≠veis ao processo
  await prisma.processoCombustivel.createMany({
    data: [
      {
        processoId: processoMunicipal.id,
        combustivelId: gasolinaComum.id,
        quantidade_litros: 15000.0,
        valor_unitario: 5.80,
        saldo_disponivel_processo: 87000.0,
      },
      {
        processoId: processoMunicipal.id,
        combustivelId: etanol.id,
        quantidade_litros: 10000.0,
        valor_unitario: 4.50,
        saldo_disponivel_processo: 45000.0,
      },
      {
        processoId: processoMunicipal.id,
        combustivelId: dieselS10.id,
        quantidade_litros: 25000.0,
        valor_unitario: 6.20,
        saldo_disponivel_processo: 155000.0,
      },
    ],
  });

  // ===============================
  // 11. COTAS POR √ìRG√ÉO
  // ===============================
  console.log('üìä 11. Criando Cotas de Combust√≠vel por √ìrg√£o...');
  
  await prisma.cotaOrgao.createMany({
    data: [
      // Secretaria de Sa√∫de - Diesel para ambul√¢ncias
      {
        processoId: processoMunicipal.id,
        orgaoId: secretariaSaude.id,
        combustivelId: dieselS10.id,
        quantidade: 10000.0,
        quantidade_utilizada: 2500.0,
        restante: 7500.0,
        saldo_disponivel_cota: 46500.0,
        ativa: true,
      },
      // Secretaria de Educa√ß√£o - Diesel para transporte escolar
      {
        processoId: processoMunicipal.id,
        orgaoId: secretariaEducacao.id,
        combustivelId: dieselS10.id,
        quantidade: 8000.0,
        quantidade_utilizada: 1800.0,
        restante: 6200.0,
        saldo_disponivel_cota: 38440.0,
        ativa: true,
      },
      // Secretaria de Obras - Diesel para m√°quinas
      {
        processoId: processoMunicipal.id,
        orgaoId: secretariaObras.id,
        combustivelId: dieselS10.id,
        quantidade: 7000.0,
        quantidade_utilizada: 3200.0,
        restante: 3800.0,
        saldo_disponivel_cota: 23560.0,
        ativa: true,
      },
      // Secretaria de Assist√™ncia - Gasolina para van
      {
        processoId: processoMunicipal.id,
        orgaoId: secretariaAssistencia.id,
        combustivelId: gasolinaComum.id,
        quantidade: 3000.0,
        quantidade_utilizada: 800.0,
        restante: 2200.0,
        saldo_disponivel_cota: 12760.0,
        ativa: true,
      },
      // Secretaria de Assist√™ncia - Etanol para van
      {
        processoId: processoMunicipal.id,
        orgaoId: secretariaAssistencia.id,
        combustivelId: etanol.id,
        quantidade: 2000.0,
        quantidade_utilizada: 400.0,
        restante: 1600.0,
        saldo_disponivel_cota: 7200.0,
        ativa: true,
      },
      // Gabinete - Gasolina para carro administrativo
      {
        processoId: processoMunicipal.id,
        orgaoId: gabinetePrefeito.id,
        combustivelId: gasolinaComum.id,
        quantidade: 1500.0,
        quantidade_utilizada: 300.0,
        restante: 1200.0,
        saldo_disponivel_cota: 6960.0,
        ativa: true,
      },
      // Gabinete - Etanol para carro administrativo
      {
        processoId: processoMunicipal.id,
        orgaoId: gabinetePrefeito.id,
        combustivelId: etanol.id,
        quantidade: 1000.0,
        quantidade_utilizada: 150.0,
        restante: 850.0,
        saldo_disponivel_cota: 3825.0,
        ativa: true,
      },
    ],
  });

  console.log('‚úÖ Cotas criadas: Sa√∫de (Diesel), Educa√ß√£o (Diesel), Obras (Diesel), Assist√™ncia (Gasolina/Etanol), Gabinete (Gasolina/Etanol)');

  // ===============================
  // 12. HIST√ìRICO DE ABASTECIMENTOS
  // ===============================
  console.log('‚õΩ 12. Criando Hist√≥rico de Abastecimentos da Prefeitura...');
  
  // Buscar uma empresa existente ou criar uma b√°sica
  let empresaExistente = await prisma.empresa.findFirst({
    where: { ativo: true },
  });

  if (!empresaExistente) {
    empresaExistente = await prisma.empresa.create({
      data: {
        nome: 'Posto Campinas Centro',
        cnpj: '11223344000155',
        uf: 'SP',
        endereco: 'Av. Francisco Glic√©rio, 1000',
        ativo: true,
        isPublic: true,
        tipo_empresa: 'POSTO_GASOLINA',
      },
    });
  }

  await prisma.abastecimento.createMany({
    data: [
      // Ambul√¢ncia UTI - Diesel
      {
        veiculoId: ambulanciaUTI.id,
        motoristaId: motoristaJoao.id,
        combustivelId: dieselS10.id,
        empresaId: empresaExistente.id,
        solicitanteId: colaboradorSaude.id,
        tipo_abastecimento: 'COM_COTA',
        quantidade: 80.0,
        preco_anp: 6.20,
        preco_empresa: 6.15,
        desconto: 0.05,
        valor_total: 492.00,
        data_abastecimento: new Date('2024-03-15T08:30:00.000Z'),
        odometro: 45000,
        orimetro: 890,
        status: 'Aprovado',
        abastecido_por: 'Jo√£o Carlos',
        nfe_chave_acesso: '35240411223344000155550010000000011987654321',
        ativo: true,
        data_aprovacao: new Date('2024-03-15T14:00:00.000Z'),
        aprovado_por: 'Carlos Eduardo Silva',
        aprovado_por_email: 'admin@campinas.sp.gov.br',
      },
      // Micro-√¥nibus Escolar - Diesel
      {
        veiculoId: microonibusEscolar.id,
        motoristaId: motoristaMaria.id,
        combustivelId: dieselS10.id,
        empresaId: empresaExistente.id,
        solicitanteId: colaboradorEducacao.id,
        tipo_abastecimento: 'COM_COTA',
        quantidade: 100.0,
        preco_anp: 6.20,
        preco_empresa: 6.15,
        desconto: 0.05,
        valor_total: 615.00,
        data_abastecimento: new Date('2024-03-16T07:00:00.000Z'),
        odometro: 32000,
        orimetro: 654,
        status: 'Aprovado',
        abastecido_por: 'Maria Jos√©',
        nfe_chave_acesso: '35240411223344000155550010000000021987654322',
        ativo: true,
        data_aprovacao: new Date('2024-03-16T16:30:00.000Z'),
        aprovado_por: 'Carlos Eduardo Silva',
        aprovado_por_email: 'admin@campinas.sp.gov.br',
      },
      // Van Assist√™ncia - Gasolina
      {
        veiculoId: vanAssistencia.id,
        motoristaId: motoristaCarlos.id,
        combustivelId: gasolinaComum.id,
        empresaId: empresaExistente.id,
        solicitanteId: colaboradorAssistencia.id,
        tipo_abastecimento: 'LIVRE',
        quantidade: 60.0,
        preco_anp: 5.80,
        preco_empresa: 5.75,
        desconto: 0.05,
        valor_total: 345.00,
        data_abastecimento: new Date('2024-03-17T10:15:00.000Z'),
        odometro: 28000,
        orimetro: 523,
        status: 'Aprovado',
        abastecido_por: 'Carlos Alberto',
        nfe_chave_acesso: '35240411223344000155550010000000031987654323',
        ativo: true,
        data_aprovacao: new Date('2024-03-17T15:45:00.000Z'),
        aprovado_por: 'Carlos Eduardo Silva',
        aprovado_por_email: 'admin@campinas.sp.gov.br',
      },
    ],
  });

  console.log('‚úÖ Abastecimentos criados: Ambul√¢ncia UTI, Micro-√¥nibus Escolar, Van Assist√™ncia');

  // ===============================
  // RESUMO FINAL
  // ===============================
  console.log('\nüéâ ==========================================');
  console.log('üéâ SEED ADMIN_PREFEITURA CONCLU√çDO COM SUCESSO!');
  console.log('üéâ ==========================================\n');

  console.log('üìä RESUMO DOS DADOS CRIADOS:');
  console.log('üèõÔ∏è 1 Prefeitura (Campinas)');
  console.log('üè¢ 5 √ìrg√£os (Sa√∫de, Educa√ß√£o, Obras, Assist√™ncia, Gabinete)');
  console.log('üëë 1 Admin Prefeitura');
  console.log('üë• 4 Colaboradores (um por secretaria)');
  console.log('üìÇ 6 Categorias (4 ve√≠culos, 2 motoristas)');
  console.log('üöó 4 Motoristas especializados');
  console.log('üöë 6 Ve√≠culos (2 ambul√¢ncias, micro-√¥nibus, caminh√£o, van, carro)');
  console.log('üîó 9 Vincula√ß√µes usu√°rio-√≥rg√£o');
  console.log('üí∞ 5 Contas de faturamento');
  console.log('üìã 1 Processo licitat√≥rio municipal');
  console.log('üìä 7 Cotas por √≥rg√£o e combust√≠vel');
  console.log('‚õΩ 3 Abastecimentos aprovados');
  console.log('üî• 3 Combust√≠veis utilizados');

  console.log('\nüîê CREDENCIAIS DE ACESSO:');
  console.log('üìß Email: admin@campinas.sp.gov.br');
  console.log('üîë Senha: 123456');
  console.log('üëë Tipo: ADMIN_PREFEITURA');
  console.log('üèõÔ∏è Prefeitura: Campinas');

  console.log('\nüåê ACESSO AO SISTEMA:');
  console.log('üöÄ API: http://localhost:3000');
  console.log('üìö Documenta√ß√£o: http://localhost:3000/api/docs');

  console.log('\n‚ú® O ADMIN_PREFEITURA pode gerenciar TODA sua prefeitura!');
  console.log('üéØ M√≥dulos dispon√≠veis: √ìrg√£os, Usu√°rios, Ve√≠culos, Motoristas,');
  console.log('   Categorias, Processos, Cotas, Abastecimentos, Faturamento');
}

main()
  .catch((e) => {
    console.error('‚ùå Erro durante o seed ADMIN_PREFEITURA:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
    console.log('üîå Conex√£o com banco de dados encerrada.');
  });

import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Iniciando seed para COLABORADOR_PREFEITURA...');
  console.log('üë§ Demonstrando todos os m√≥dulos acess√≠veis ao COLABORADOR_PREFEITURA');

  // Hash das senhas
  const hashedPassword = await bcrypt.hash('123456', 12);

  // ===============================
  // 1. PREFEITURA (Contexto de Trabalho)
  // ===============================
  console.log('üèõÔ∏è 1. Criando Prefeitura (contexto de trabalho)...');
  const prefeitura = await prisma.prefeitura.upsert({
    where: { cnpj: '22333444000177' },
    update: {},
    create: {
      nome: 'Prefeitura Municipal de Ribeir√£o Preto',
      cnpj: '22333444000177',
      email_administrativo: 'admin@ribeiraopreto.sp.gov.br',
      ativo: true,
      data_cadastro: new Date(),
      requer_cupom_fiscal: true,
    },
  });
  console.log('‚úÖ Prefeitura contexto criada:', prefeitura.nome);

  // ===============================
  // 2. ADMIN DA PREFEITURA (J√° existente)
  // ===============================
  console.log('üëë 2. Criando Admin da Prefeitura (contexto)...');
  const adminPrefeitura = await prisma.usuario.upsert({
    where: { email: 'admin@ribeiraopreto.sp.gov.br' },
    update: {},
    create: {
      email: 'admin@ribeiraopreto.sp.gov.br',
      senha: hashedPassword,
      nome: 'Sandra Regina Oliveira',
      cpf: '98765432100',
      tipo_usuario: 'ADMIN_PREFEITURA',
      prefeituraId: prefeitura.id,
      statusAcess: 'Ativado',
      ativo: true,
      data_cadastro: new Date(),
      phone: '16987654321',
    },
  });
  console.log('‚úÖ Admin Prefeitura criado (contexto):', adminPrefeitura.email);

  // ===============================
  // 3. √ìRG√ÉOS (J√° existentes - contexto)
  // ===============================
  console.log('üè¢ 3. Criando √ìrg√£os (contexto de trabalho)...');
  
  const secretariaSaude = await prisma.orgao.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Secretaria Municipal de Sa√∫de',
      sigla: 'SMS',
      ativo: true,
    },
  });

  const secretariaEducacao = await prisma.orgao.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Secretaria Municipal de Educa√ß√£o',
      sigla: 'SME',
      ativo: true,
    },
  });

  const secretariaTransporte = await prisma.orgao.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Secretaria Municipal de Transportes',
      sigla: 'SMT',
      ativo: true,
    },
  });

  console.log('‚úÖ √ìrg√£os criados (contexto): SMS, SME, SMT');

  // ===============================
  // 4. COLABORADOR PRINCIPAL (Usu√°rio Foco)
  // ===============================
  console.log('üë§ 4. Criando COLABORADOR_PREFEITURA (usu√°rio principal)...');
  const colaboradorPrincipal = await prisma.usuario.upsert({
    where: { email: 'fernanda.santos@ribeiraopreto.sp.gov.br' },
    update: {},
    create: {
      email: 'fernanda.santos@ribeiraopreto.sp.gov.br',
      senha: hashedPassword,
      nome: 'Fernanda Santos Silva',
      cpf: '11223344556',
      tipo_usuario: 'COLABORADOR_PREFEITURA',
      prefeituraId: prefeitura.id,
      statusAcess: 'Ativado',
      ativo: true,
      data_cadastro: new Date(),
      phone: '16988776655',
    },
  });
  console.log('‚úÖ Colaborador Principal criado:', colaboradorPrincipal.email);

  // Outros colaboradores (contexto)
  const colaboradorEducacao = await prisma.usuario.upsert({
    where: { email: 'marcos.lima@ribeiraopreto.sp.gov.br' },
    update: {},
    create: {
      email: 'marcos.lima@ribeiraopreto.sp.gov.br',
      senha: hashedPassword,
      nome: 'Marcos Lima Costa',
      cpf: '22334455667',
      tipo_usuario: 'COLABORADOR_PREFEITURA',
      prefeituraId: prefeitura.id,
      statusAcess: 'Ativado',
      ativo: true,
      data_cadastro: new Date(),
      phone: '16977665544',
    },
  });

  const colaboradorTransporte = await prisma.usuario.upsert({
    where: { email: 'patricia.alves@ribeiraopreto.sp.gov.br' },
    update: {},
    create: {
      email: 'patricia.alves@ribeiraopreto.sp.gov.br',
      senha: hashedPassword,
      nome: 'Patr√≠cia Alves Mendes',
      cpf: '33445566778',
      tipo_usuario: 'COLABORADOR_PREFEITURA',
      prefeituraId: prefeitura.id,
      statusAcess: 'Ativado',
      ativo: true,
      data_cadastro: new Date(),
      phone: '16966554433',
    },
  });

  console.log('‚úÖ Colaboradores contexto criados: Marcos (Educa√ß√£o), Patr√≠cia (Transporte)');

  // ===============================
  // 5. VINCULA√á√ïES USU√ÅRIO-√ìRG√ÉO
  // ===============================
  console.log('üîó 5. Criando Vincula√ß√µes dos Colaboradores...');
  
  await prisma.usuarioOrgao.createMany({
    data: [
      // Fernanda - Sa√∫de (principal) e Educa√ß√£o (apoio)
      { usuarioId: colaboradorPrincipal.id, orgaoId: secretariaSaude.id, ativo: true },
      { usuarioId: colaboradorPrincipal.id, orgaoId: secretariaEducacao.id, ativo: true },
      // Marcos - Educa√ß√£o
      { usuarioId: colaboradorEducacao.id, orgaoId: secretariaEducacao.id, ativo: true },
      // Patr√≠cia - Transporte
      { usuarioId: colaboradorTransporte.id, orgaoId: secretariaTransporte.id, ativo: true },
      // Admin - Todos os √≥rg√£os
      { usuarioId: adminPrefeitura.id, orgaoId: secretariaSaude.id, ativo: true },
      { usuarioId: adminPrefeitura.id, orgaoId: secretariaEducacao.id, ativo: true },
      { usuarioId: adminPrefeitura.id, orgaoId: secretariaTransporte.id, ativo: true },
    ],
  });

  console.log('‚úÖ Vincula√ß√µes criadas: Fernanda (SMS+SME), Marcos (SME), Patr√≠cia (SMT)');

  // ===============================
  // 6. CATEGORIAS (Criadas pelo Colaborador)
  // ===============================
  console.log('üìÇ 6. Criando Categorias (m√≥dulo do colaborador)...');
  
  // Categorias que Fernanda pode criar para organizar a frota
  const categoriaEmergenciaMedica = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'VEICULO',
      nome: 'Emerg√™ncia M√©dica',
      descricao: 'Ambul√¢ncias de emerg√™ncia e UTI m√≥vel',
      ativo: true,
    },
  });

  const categoriaTransportePaciente = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'VEICULO',
      nome: 'Transporte de Pacientes',
      descricao: 'Ve√≠culos para transporte de pacientes n√£o cr√≠ticos',
      ativo: true,
    },
  });

  const categoriaVeiculoEducacional = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'VEICULO',
      nome: 'Transporte Educacional',
      descricao: 'Ve√≠culos para atividades educacionais e transporte de profissionais',
      ativo: true,
    },
  });

  const categoriaVeiculoInspetoria = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'VEICULO',
      nome: 'Ve√≠culos de Inspe√ß√£o',
      descricao: 'Carros para fiscaliza√ß√£o e inspe√ß√£o sanit√°ria',
      ativo: true,
    },
  });

  // Categorias de motoristas
  const categoriaMotoristaEmergencia = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'MOTORISTA',
      nome: 'Motoristas de Emerg√™ncia',
      descricao: 'Condutores especializados em atendimento de emerg√™ncia',
      ativo: true,
    },
  });

  const categoriaMotoristaTransporte = await prisma.categoria.create({
    data: {
      prefeituraId: prefeitura.id,
      tipo_categoria: 'MOTORISTA',
      nome: 'Motoristas de Transporte',
      descricao: 'Condutores para transporte geral e educacional',
      ativo: true,
    },
  });

  console.log('‚úÖ Categorias criadas: 4 ve√≠culos, 2 motoristas (organizadas por Fernanda)');

  // ===============================
  // 7. MOTORISTAS (Cadastrados pelo Colaborador)
  // ===============================
  console.log('üöó 7. Cadastrando Motoristas (m√≥dulo do colaborador)...');
  
  // Motoristas que Fernanda cadastra para sua √°rea
  const motoristaRoberto = await prisma.motorista.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Roberto Carlos Mendes',
      cpf: '12312312300',
      cnh: '11223344556',
      categoria_cnh: 'D',
      data_vencimento_cnh: new Date('2025-08-15'),
      telefone: '16999111222',
      email: 'roberto.mendes@ribeiraopreto.sp.gov.br',
      endereco: 'Rua dos Bandeirantes, 789 - Ribeir√£o Preto/SP',
      ativo: true,
      observacoes: 'Motorista especializado em emerg√™ncias m√©dicas, curso de primeiros socorros atualizado. 18 anos de experi√™ncia na √°rea.',
    },
  });

  const motoristaClaudio = await prisma.motorista.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Cl√°udio Ferreira Silva',
      cpf: '23423423411',
      cnh: '22334455667',
      categoria_cnh: 'D',
      data_vencimento_cnh: new Date('2025-11-30'),
      telefone: '16988222333',
      email: 'claudio.silva@ribeiraopreto.sp.gov.br',
      endereco: 'Av. Independ√™ncia, 1456 - Ribeir√£o Preto/SP',
      ativo: true,
      observacoes: 'Motorista de ambul√¢ncia b√°sica, treinamento em transporte de pacientes. Conhece bem a cidade.',
    },
  });

  const motoristaLuciana = await prisma.motorista.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Luciana Pereira Santos',
      cpf: '34534534522',
      cnh: '33445566778',
      categoria_cnh: 'B',
      data_vencimento_cnh: new Date('2025-04-22'),
      telefone: '16977333444',
      email: 'luciana.santos@ribeiraopreto.sp.gov.br',
      endereco: 'Rua das Ac√°cias, 321 - Ribeir√£o Preto/SP',
      ativo: true,
      observacoes: 'Motorista para atividades educacionais e transporte de profissionais da sa√∫de.',
    },
  });

  const motoristaAnderson = await prisma.motorista.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Anderson Luis Rodrigues',
      cpf: '45645645633',
      cnh: '44556677889',
      categoria_cnh: 'B',
      data_vencimento_cnh: new Date('2025-07-10'),
      telefone: '16966444555',
      email: 'anderson.rodrigues@ribeiraopreto.sp.gov.br',
      endereco: 'Rua S√£o Paulo, 654 - Ribeir√£o Preto/SP',
      ativo: true,
      observacoes: 'Motorista para fiscaliza√ß√£o sanit√°ria e atividades de inspe√ß√£o.',
    },
  });

  const motoristaRegina = await prisma.motorista.create({
    data: {
      prefeituraId: prefeitura.id,
      nome: 'Regina Aparecida Costa',
      cpf: '56756756744',
      cnh: '55667788990',
      categoria_cnh: 'D',
      data_vencimento_cnh: new Date('2025-12-05'),
      telefone: '16955555666',
      email: 'regina.costa@ribeiraopreto.sp.gov.br',
      endereco: 'Rua da Liberdade, 987 - Ribeir√£o Preto/SP',
      ativo: true,
      observacoes: 'Motorista de transporte escolar, experi√™ncia com crian√ßas e adolescentes.',
    },
  });

  console.log('‚úÖ Motoristas cadastrados: Roberto (UTI), Cl√°udio (Ambul√¢ncia), Luciana (Educa√ß√£o), Anderson (Inspe√ß√£o), Regina (Escolar)');

  // ===============================
  // 8. COMBUST√çVEIS (Contexto - j√° existentes)
  // ===============================
  console.log('‚õΩ 8. Verificando Combust√≠veis (contexto)...');
  
  // Buscar ou criar combust√≠veis b√°sicos
  let gasolinaComum = await prisma.combustivel.findUnique({ where: { sigla: 'GAS_COMUM' } });
  let etanol = await prisma.combustivel.findUnique({ where: { sigla: 'ETANOL' } });
  let dieselS10 = await prisma.combustivel.findUnique({ where: { sigla: 'DIESEL_S10' } });

  if (!gasolinaComum) {
    gasolinaComum = await prisma.combustivel.create({
      data: {
        nome: 'Gasolina Comum',
        sigla: 'GAS_COMUM',
        descricao: 'Gasolina comum para ve√≠culos leves',
        ativo: true,
      },
    });
  }

  if (!etanol) {
    etanol = await prisma.combustivel.create({
      data: {
        nome: 'Etanol',
        sigla: 'ETANOL',
        descricao: 'Etanol hidratado para ve√≠culos flex',
        ativo: true,
      },
    });
  }

  if (!dieselS10) {
    dieselS10 = await prisma.combustivel.create({
      data: {
        nome: 'Diesel S10',
        sigla: 'DIESEL_S10',
        descricao: 'Diesel com baixo teor de enxofre',
        ativo: true,
      },
    });
  }

  console.log('‚úÖ Combust√≠veis verificados: Gasolina, Etanol, Diesel S10');

  // ===============================
  // 9. VE√çCULOS (Cadastrados pelo Colaborador)
  // ===============================
  console.log('üöë 9. Cadastrando Ve√≠culos (m√≥dulo do colaborador)...');
  
  // Ve√≠culos que Fernanda cadastra para as secretarias que ela atende
  
  // Ambul√¢ncia UTI (Sa√∫de)
  const ambulanciaUTI = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaSaude.id,
      nome: 'Ambul√¢ncia UTI 02',
      placa: 'RIB1234',
      modelo: 'Mercedes Sprinter 319',
      ano: 2022,
      capacidade_tanque: 90.0,
      tipo_abastecimento: 'COTA',
      ativo: true,
      tipo_veiculo: 'Ambulancia',
      situacao_veiculo: 'Proprio',
      apelido: 'UTI M√≥vel Central',
      ano_fabricacao: 2021,
      chassi: '9BM979045RIB001',
      renavam: '77777777777',
      cor: 'Branco',
      capacidade_passageiros: 3,
      observacoes: 'Ambul√¢ncia UTI equipada com ventilador, monitor multiparam√©trico, desfibrilador e bomba de infus√£o. Cadastrada por Fernanda Santos.',
      periodicidade: 'Semanal',
      quantidade: 180.0,
    },
  });

  // Ambul√¢ncia B√°sica (Sa√∫de)  
  const ambulanciaBasica = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaSaude.id,
      nome: 'Ambul√¢ncia B√°sica 03',
      placa: 'RIB5678',
      modelo: 'Fiat Ducato 2.8',
      ano: 2021,
      capacidade_tanque: 85.0,
      tipo_abastecimento: 'COTA',
      ativo: true,
      tipo_veiculo: 'Ambulancia',
      situacao_veiculo: 'Proprio',
      apelido: 'B√°sica Norte',
      ano_fabricacao: 2020,
      chassi: '9BD21806RIB002',
      renavam: '88888888888',
      cor: 'Branco',
      capacidade_passageiros: 4,
      observacoes: 'Ambul√¢ncia b√°sica para transporte inter-hospitalar e remo√ß√µes simples. Cadastrada por Fernanda Santos.',
      periodicidade: 'Semanal',
      quantidade: 140.0,
    },
  });

  // Ve√≠culo Educacional (Educa√ß√£o)
  const veiculoEducacional = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaEducacao.id,
      nome: 'Van Educacional 01',
      placa: 'RIB9012',
      modelo: 'Ford Transit 350L',
      ano: 2023,
      capacidade_tanque: 80.0,
      tipo_abastecimento: 'LIVRE',
      ativo: true,
      tipo_veiculo: 'Microonibus',
      situacao_veiculo: 'Proprio',
      apelido: 'Van da Educa√ß√£o',
      ano_fabricacao: 2022,
      chassi: '1FTBW3XM5RIB003',
      renavam: '99999999999',
      cor: 'Amarelo',
      capacidade_passageiros: 15,
      observacoes: 'Van para transporte de profissionais da educa√ß√£o em atividades externas e apoio escolar. Cadastrada por Fernanda Santos.',
    },
  });

  // Carro de Inspe√ß√£o (Sa√∫de - Vigil√¢ncia Sanit√°ria)
  const carroInspecao = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaSaude.id,
      nome: 'Carro Inspe√ß√£o Sanit√°ria 01',
      placa: 'RIB3456',
      modelo: 'Chevrolet Onix Plus',
      ano: 2023,
      capacidade_tanque: 44.0,
      tipo_abastecimento: 'COM_AUTORIZACAO',
      ativo: true,
      tipo_veiculo: 'Carro',
      situacao_veiculo: 'Proprio',
      apelido: 'Inspe√ß√£o 01',
      ano_fabricacao: 2022,
      chassi: '9BGKS48U0RIB004',
      renavam: '10101010101',
      cor: 'Branco',
      capacidade_passageiros: 5,
      observacoes: 'Ve√≠culo para atividades de vigil√¢ncia sanit√°ria e fiscaliza√ß√£o. Cadastrado por Fernanda Santos.',
    },
  });

  // Carro Administrativo Educa√ß√£o
  const carroAdminEducacao = await prisma.veiculo.create({
    data: {
      prefeituraId: prefeitura.id,
      orgaoId: secretariaEducacao.id,
      nome: 'Carro Administrativo Educa√ß√£o',
      placa: 'RIB7890',
      modelo: 'Volkswagen Virtus',
      ano: 2022,
      capacidade_tanque: 50.0,
      tipo_abastecimento: 'COM_AUTORIZACAO',
      ativo: true,
      tipo_veiculo: 'Carro',
      situacao_veiculo: 'Proprio',
      apelido: 'Admin Educa√ß√£o',
      ano_fabricacao: 2021,
      chassi: '9BWAA05Z5RIB005',
      renavam: '11111111112',
      cor: 'Prata',
      capacidade_passageiros: 5,
      observacoes: 'Ve√≠culo administrativo para atividades da Secretaria de Educa√ß√£o. Cadastrado por Fernanda Santos.',
    },
  });

  console.log('‚úÖ Ve√≠culos cadastrados: 2 Ambul√¢ncias (SMS), 1 Van (SME), 1 Carro Inspe√ß√£o (SMS), 1 Carro Admin (SME)');

  // Associar combust√≠veis aos ve√≠culos
  await prisma.veiculoCombustivel.createMany({
    data: [
      // Ambul√¢ncias - Diesel
      { veiculoId: ambulanciaUTI.id, combustivelId: dieselS10.id, ativo: true },
      { veiculoId: ambulanciaBasica.id, combustivelId: dieselS10.id, ativo: true },
      // Van Educacional - Diesel
      { veiculoId: veiculoEducacional.id, combustivelId: dieselS10.id, ativo: true },
      // Carros - Gasolina/Etanol
      { veiculoId: carroInspecao.id, combustivelId: gasolinaComum.id, ativo: true },
      { veiculoId: carroInspecao.id, combustivelId: etanol.id, ativo: true },
      { veiculoId: carroAdminEducacao.id, combustivelId: gasolinaComum.id, ativo: true },
      { veiculoId: carroAdminEducacao.id, combustivelId: etanol.id, ativo: true },
    ],
  });

  // Associar categorias aos ve√≠culos
  await prisma.veiculoCategoria.createMany({
    data: [
      { veiculoId: ambulanciaUTI.id, categoriaId: categoriaEmergenciaMedica.id, ativo: true },
      { veiculoId: ambulanciaBasica.id, categoriaId: categoriaTransportePaciente.id, ativo: true },
      { veiculoId: veiculoEducacional.id, categoriaId: categoriaVeiculoEducacional.id, ativo: true },
      { veiculoId: carroInspecao.id, categoriaId: categoriaVeiculoInspetoria.id, ativo: true },
      { veiculoId: carroAdminEducacao.id, categoriaId: categoriaVeiculoEducacional.id, ativo: true },
    ],
  });

  // Associar motoristas aos ve√≠culos
  await prisma.veiculoMotorista.createMany({
    data: [
      // Roberto - Ambul√¢ncia UTI
      { veiculoId: ambulanciaUTI.id, motoristaId: motoristaRoberto.id, data_inicio: new Date(), ativo: true },
      // Cl√°udio - Ambul√¢ncia B√°sica
      { veiculoId: ambulanciaBasica.id, motoristaId: motoristaClaudio.id, data_inicio: new Date(), ativo: true },
      { veiculoId: ambulanciaUTI.id, motoristaId: motoristaClaudio.id, data_inicio: new Date(), ativo: true },
      // Luciana - Van Educacional e Carro Admin Educa√ß√£o
      { veiculoId: veiculoEducacional.id, motoristaId: motoristaLuciana.id, data_inicio: new Date(), ativo: true },
      { veiculoId: carroAdminEducacao.id, motoristaId: motoristaLuciana.id, data_inicio: new Date(), ativo: true },
      // Anderson - Carro Inspe√ß√£o
      { veiculoId: carroInspecao.id, motoristaId: motoristaAnderson.id, data_inicio: new Date(), ativo: true },
      // Regina - Van Educacional (backup)
      { veiculoId: veiculoEducacional.id, motoristaId: motoristaRegina.id, data_inicio: new Date(), ativo: true },
    ],
  });

  console.log('‚úÖ Associa√ß√µes criadas: Ve√≠culos ‚Üî Combust√≠veis, Categorias, Motoristas');

  // ===============================
  // 10. PROCESSO E COTAS (Contexto - criados pelo Admin)
  // ===============================
  console.log('üìã 10. Criando Processo Municipal (contexto - criado pelo admin)...');
  
  const processoMunicipal = await prisma.processo.create({
    data: {
      tipo_contrato: 'OBJETIVO',
      prefeituraId: prefeitura.id,
      litros_desejados: 35000.0,
      valor_utilizado: 18000.0,
      valor_disponivel: 280000.0,
      numero_processo: 'PROC-RIB-2024-001',
      numero_documento: 'LICIT-RIB-2024-001',
      tipo_documento: 'LICITACAO',
      tipo_itens: 'QUANTIDADE_LITROS',
      objeto: 'Contrata√ß√£o de empresa para fornecimento de combust√≠veis automotivos para a frota municipal de Ribeir√£o Preto, contemplando ambul√¢ncias, ve√≠culos administrativos e de inspe√ß√£o',
      data_abertura: new Date('2024-02-01'),
      data_encerramento: new Date('2024-12-31'),
      status: 'ATIVO',
      ativo: true,
      observacoes: 'Processo licitat√≥rio preg√£o eletr√¥nico 001/2024. Contempla todas as secretarias municipais.',
      arquivo_contrato: '/uploads/contratos/licitacao-ribeirao-preto-001-2024.pdf',
    },
  });

  // Associar combust√≠veis ao processo
  await prisma.processoCombustivel.createMany({
    data: [
      {
        processoId: processoMunicipal.id,
        combustivelId: gasolinaComum.id,
        quantidade_litros: 12000.0,
        valor_unitario: 5.90,
        saldo_disponivel_processo: 70800.0,
      },
      {
        processoId: processoMunicipal.id,
        combustivelId: etanol.id,
        quantidade_litros: 8000.0,
        valor_unitario: 4.60,
        saldo_disponivel_processo: 36800.0,
      },
      {
        processoId: processoMunicipal.id,
        combustivelId: dieselS10.id,
        quantidade_litros: 15000.0,
        valor_unitario: 6.30,
        saldo_disponivel_processo: 94500.0,
      },
    ],
  });

  // Criar cotas por √≥rg√£o (definidas pelo admin)
  await prisma.cotaOrgao.createMany({
    data: [
      // Sa√∫de - Diesel para ambul√¢ncias
      {
        processoId: processoMunicipal.id,
        orgaoId: secretariaSaude.id,
        combustivelId: dieselS10.id,
        quantidade: 8000.0,
        quantidade_utilizada: 1200.0,
        restante: 6800.0,
        saldo_disponivel_cota: 42840.0,
        ativa: true,
      },
      // Sa√∫de - Gasolina para carros de inspe√ß√£o
      {
        processoId: processoMunicipal.id,
        orgaoId: secretariaSaude.id,
        combustivelId: gasolinaComum.id,
        quantidade: 2000.0,
        quantidade_utilizada: 300.0,
        restante: 1700.0,
        saldo_disponivel_cota: 10030.0,
        ativa: true,
      },
      // Educa√ß√£o - Diesel para van
      {
        processoId: processoMunicipal.id,
        orgaoId: secretariaEducacao.id,
        combustivelId: dieselS10.id,
        quantidade: 4000.0,
        quantidade_utilizada: 800.0,
        restante: 3200.0,
        saldo_disponivel_cota: 20160.0,
        ativa: true,
      },
      // Educa√ß√£o - Gasolina para carros
      {
        processoId: processoMunicipal.id,
        orgaoId: secretariaEducacao.id,
        combustivelId: gasolinaComum.id,
        quantidade: 1500.0,
        quantidade_utilizada: 250.0,
        restante: 1250.0,
        saldo_disponivel_cota: 7375.0,
        ativa: true,
      },
      // Educa√ß√£o - Etanol para carros
      {
        processoId: processoMunicipal.id,
        orgaoId: secretariaEducacao.id,
        combustivelId: etanol.id,
        quantidade: 1000.0,
        quantidade_utilizada: 150.0,
        restante: 850.0,
        saldo_disponivel_cota: 3910.0,
        ativa: true,
      },
    ],
  });

  console.log('‚úÖ Processo e Cotas criados (contexto): Processo municipal ativo');

  // ===============================
  // 11. EMPRESAS (Contexto - postos dispon√≠veis)
  // ===============================
  console.log('‚õΩ 11. Criando Postos (contexto)...');
  
  let empresaExistente = await prisma.empresa.findFirst({
    where: { ativo: true },
  });

  if (!empresaExistente) {
    empresaExistente = await prisma.empresa.create({
      data: {
        nome: 'Posto BR Ribeir√£o Centro',
        cnpj: '55666777000188',
        uf: 'SP',
        endereco: 'Av. Francisco Junqueira, 1500',
        endereco_completo: 'Av. Francisco Junqueira, 1500, Centro, Ribeir√£o Preto - SP',
        ativo: true,
        isPublic: true,
        tipo_empresa: 'POSTO_GASOLINA',
        bandeira: 'BR',
        telefone: '16999887766',
        email: 'contato@postobr-ribeirao.com',
      },
    });
  }

  console.log('‚úÖ Posto criado (contexto):', empresaExistente.nome);

  // ===============================
  // 12. SOLICITA√á√ïES DE ABASTECIMENTO (Criadas pelo Colaborador)
  // ===============================
  console.log('‚õΩ 12. Criando Solicita√ß√µes de Abastecimento (m√≥dulo do colaborador)...');
  
  // Solicita√ß√µes que Fernanda faz para os ve√≠culos da sua √°rea
  await prisma.solicitacaoAbastecimento.createMany({
    data: [
      // Solicita√ß√£o para Ambul√¢ncia UTI
      {
        prefeituraId: prefeitura.id,
        veiculoId: ambulanciaUTI.id,
        motoristaId: motoristaRoberto.id,
        combustivelId: dieselS10.id,
        empresaId: empresaExistente.id,
        quantidade: 85.0,
        data_solicitacao: new Date('2024-03-20T08:00:00.000Z'),
        data_expiracao: new Date('2024-03-22T08:00:00.000Z'),
        tipo_abastecimento: 'COM_COTA',
        status: 'PENDENTE',
        abastecido_por: 'Sistema',
        valor_total: 535.50,
        preco_empresa: 6.30,
        ativo: true,
        observacoes: 'Solicita√ß√£o de abastecimento para ambul√¢ncia UTI - turno manh√£. Solicitado por Fernanda Santos.',
        created_at: new Date(),
        updated_at: new Date(),
      },
      // Solicita√ß√£o para Ambul√¢ncia B√°sica
      {
        prefeituraId: prefeitura.id,
        veiculoId: ambulanciaBasica.id,
        motoristaId: motoristaClaudio.id,
        combustivelId: dieselS10.id,
        empresaId: empresaExistente.id,
        quantidade: 75.0,
        data_solicitacao: new Date('2024-03-20T14:30:00.000Z'),
        data_expiracao: new Date('2024-03-22T14:30:00.000Z'),
        tipo_abastecimento: 'COM_COTA',
        status: 'APROVADA',
        aprovado_por: 'Sandra Regina Oliveira',
        aprovado_por_email: 'admin@ribeiraopreto.sp.gov.br',
        data_aprovacao: new Date('2024-03-20T16:00:00.000Z'),
        abastecido_por: 'Sistema',
        valor_total: 472.50,
        preco_empresa: 6.30,
        ativo: true,
        observacoes: 'Solicita√ß√£o aprovada pelo admin. Ambul√¢ncia para plant√£o noturno. Solicitado por Fernanda Santos.',
        created_at: new Date(),
        updated_at: new Date(),
      },
      // Solicita√ß√£o para Carro de Inspe√ß√£o
      {
        prefeituraId: prefeitura.id,
        veiculoId: carroInspecao.id,
        motoristaId: motoristaAnderson.id,
        combustivelId: gasolinaComum.id,
        empresaId: empresaExistente.id,
        quantidade: 40.0,
        data_solicitacao: new Date('2024-03-21T09:15:00.000Z'),
        data_expiracao: new Date('2024-03-23T09:15:00.000Z'),
        tipo_abastecimento: 'COM_AUTORIZACAO',
        status: 'APROVADA',
        aprovado_por: 'Sandra Regina Oliveira',
        aprovado_por_email: 'admin@ribeiraopreto.sp.gov.br',
        data_aprovacao: new Date('2024-03-21T10:45:00.000Z'),
        abastecido_por: 'Sistema',
        valor_total: 236.00,
        preco_empresa: 5.90,
        ativo: true,
        observacoes: 'Solicita√ß√£o para fiscaliza√ß√£o sanit√°ria nos estabelecimentos da regi√£o central. Solicitado por Fernanda Santos.',
        created_at: new Date(),
        updated_at: new Date(),
      },
      // Solicita√ß√£o para Van Educacional
      {
        prefeituraId: prefeitura.id,
        veiculoId: veiculoEducacional.id,
        motoristaId: motoristaLuciana.id,
        combustivelId: dieselS10.id,
        empresaId: empresaExistente.id,
        quantidade: 70.0,
        data_solicitacao: new Date('2024-03-21T13:20:00.000Z'),
        data_expiracao: new Date('2024-03-23T13:20:00.000Z'),
        tipo_abastecimento: 'LIVRE',
        status: 'PENDENTE',
        abastecido_por: 'Sistema',
        valor_total: 441.00,
        preco_empresa: 6.30,
        ativo: true,
        observacoes: 'Van para transporte de professores para capacita√ß√£o externa. Solicitado por Fernanda Santos via delega√ß√£o da Educa√ß√£o.',
        created_at: new Date(),
        updated_at: new Date(),
      },
    ],
  });

  console.log('‚úÖ Solicita√ß√µes criadas: 2 Ambul√¢ncias, 1 Carro Inspe√ß√£o, 1 Van (por Fernanda Santos)');

  // ===============================
  // 13. ABASTECIMENTOS REALIZADOS (Hist√≥rico)
  // ===============================
  console.log('‚õΩ 13. Criando Hist√≥rico de Abastecimentos...');
  
  await prisma.abastecimento.createMany({
    data: [
      // Abastecimento da Ambul√¢ncia B√°sica (aprovado)
      {
        veiculoId: ambulanciaBasica.id,
        motoristaId: motoristaClaudio.id,
        combustivelId: dieselS10.id,
        empresaId: empresaExistente.id,
        solicitanteId: colaboradorPrincipal.id,
        tipo_abastecimento: 'COM_COTA',
        quantidade: 75.0,
        preco_anp: 6.30,
        preco_empresa: 6.25,
        desconto: 0.05,
        valor_total: 468.75,
        data_abastecimento: new Date('2024-03-20T17:30:00.000Z'),
        odometro: 28500,
        orimetro: 620,
        status: 'Aprovado',
        abastecido_por: 'Cl√°udio Ferreira',
        nfe_chave_acesso: '35240455666777000188550010000000101234567890',
        ativo: true,
        data_aprovacao: new Date('2024-03-20T18:00:00.000Z'),
        aprovado_por: 'Sandra Regina Oliveira',
        aprovado_por_email: 'admin@ribeiraopreto.sp.gov.br',
      },
      // Abastecimento do Carro de Inspe√ß√£o (aprovado)
      {
        veiculoId: carroInspecao.id,
        motoristaId: motoristaAnderson.id,
        combustivelId: gasolinaComum.id,
        empresaId: empresaExistente.id,
        solicitanteId: colaboradorPrincipal.id,
        tipo_abastecimento: 'COM_AUTORIZACAO',
        quantidade: 40.0,
        preco_anp: 5.90,
        preco_empresa: 5.85,
        desconto: 0.05,
        valor_total: 234.00,
        data_abastecimento: new Date('2024-03-21T11:15:00.000Z'),
        odometro: 15200,
        orimetro: 310,
        status: 'Aprovado',
        abastecido_por: 'Anderson Luis',
        nfe_chave_acesso: '35240455666777000188550010000000111234567891',
        ativo: true,
        data_aprovacao: new Date('2024-03-21T15:30:00.000Z'),
        aprovado_por: 'Sandra Regina Oliveira',
        aprovado_por_email: 'admin@ribeiraopreto.sp.gov.br',
      },
    ],
  });

  console.log('‚úÖ Abastecimentos hist√≥ricos criados: Ambul√¢ncia B√°sica, Carro Inspe√ß√£o');

  // ===============================
  // RESUMO FINAL
  // ===============================
  console.log('\nüéâ ==========================================');
  console.log('üéâ SEED COLABORADOR_PREFEITURA CONCLU√çDO!');
  console.log('üéâ ==========================================\n');

  console.log('üìä RESUMO DOS DADOS CRIADOS:');
  console.log('üèõÔ∏è 1 Prefeitura (Ribeir√£o Preto) - contexto');
  console.log('üè¢ 3 √ìrg√£os (SMS, SME, SMT) - contexto');
  console.log('üëë 1 Admin Prefeitura - contexto');
  console.log('üë§ 1 Colaborador Principal (Fernanda Santos)');
  console.log('üë• 2 Colaboradores contexto (Marcos, Patr√≠cia)');
  console.log('üîó 7 Vincula√ß√µes usu√°rio-√≥rg√£o');
  console.log('üìÇ 6 Categorias criadas pelo colaborador');
  console.log('üöó 5 Motoristas cadastrados pelo colaborador');
  console.log('üöë 5 Ve√≠culos cadastrados pelo colaborador');
  console.log('üìã 1 Processo municipal - contexto');
  console.log('üìä 5 Cotas por √≥rg√£o/combust√≠vel - contexto');
  console.log('‚ö†Ô∏è 4 Solicita√ß√µes de abastecimento');
  console.log('‚õΩ 2 Abastecimentos realizados');
  console.log('üî• 3 Combust√≠veis em uso');

  console.log('\nüîê CREDENCIAIS DE ACESSO:');
  console.log('üìß Email: fernanda.santos@ribeiraopreto.sp.gov.br');
  console.log('üîë Senha: 123456');
  console.log('üë§ Tipo: COLABORADOR_PREFEITURA');
  console.log('üèõÔ∏è Prefeitura: Ribeir√£o Preto');
  console.log('üè¢ √ìrg√£os: SMS (principal) + SME (apoio)');

  console.log('\nüë• OUTROS COLABORADORES:');
  console.log('üìß marcos.lima@ribeiraopreto.sp.gov.br (SME)');
  console.log('üìß patricia.alves@ribeiraopreto.sp.gov.br (SMT)');
  console.log('üëë admin@ribeiraopreto.sp.gov.br (ADMIN)');

  console.log('\nüåê ACESSO AO SISTEMA:');
  console.log('üöÄ API: http://localhost:3000');
  console.log('üìö Documenta√ß√£o: http://localhost:3000/api/docs');

  console.log('\n‚ú® O COLABORADOR_PREFEITURA pode:');
  console.log('üìÇ Criar categorias de organiza√ß√£o');
  console.log('üöó Cadastrar motoristas da prefeitura');
  console.log('üöë Cadastrar ve√≠culos dos seus √≥rg√£os');
  console.log('‚õΩ Solicitar abastecimentos');
  console.log('üëÅÔ∏è Visualizar relat√≥rios dos seus √≥rg√£os');
  console.log('üìä Acompanhar cotas e consumo');
}

main()
  .catch((e) => {
    console.error('‚ùå Erro durante o seed COLABORADOR_PREFEITURA:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
    console.log('üîå Conex√£o com banco de dados encerrada.');
  });
